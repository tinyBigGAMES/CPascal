// 109_FunctionType.cpas
// BNF Rules: <function_type>, <parameter_type_list>, <type_definition>, <calling_convention>
program FunctionTypeTest;

function printf(format: PChar, ...): Int32; cdecl; external "msvcrt.dll";

type
  TIntFunction = function(const AX: Int32; const AY: Int32): Int32;
  TFloatFunction = function(const AX: Double; const AY: Double): Double; cdecl;
  TProcedureType = procedure(const AMessage: PChar);
  TCompareFunction = function(const ALeft: Int32; const ARight: Int32): Int32; stdcall;

// Actual functions that match the types
function LAdd(const AX: Int32; const AY: Int32): Int32;
begin
  return AX + AY;
end;

function LMultiply(const AX: Int32; const AY: Int32): Int32;
begin
  return AX * AY;
end;

function LAddFloat(const AX: Double; const AY: Double): Double; cdecl;
begin
  return AX + AY;
end;

procedure LPrintMessage(const AMessage: PChar);
begin
  printf("  Message: %s\n", AMessage);
end;

function LCompare(const ALeft: Int32; const ARight: Int32): Int32; stdcall;
begin
  if ALeft < ARight then
    return -1
  else if ALeft > ARight then
    return 1
  else
    return 0;
end;

var
  LIntFunc: TIntFunction;
  LFloatFunc: TFloatFunction;
  LProc: TProcedureType;
  LCompFunc: TCompareFunction;
  LResult: Int32;
  LFloatResult: Double;

begin
  printf("Function type test:\n");
  
  // Assign function pointers
  LIntFunc := @LAdd;
  LFloatFunc := @LAddFloat;
  LProc := @LPrintMessage;
  LCompFunc := @LCompare;
  
  // Use function pointers
  LResult := LIntFunc(15, 25);
  printf("  Integer function result: %d\n", LResult);
  
  LIntFunc := @LMultiply;
  LResult := LIntFunc(6, 7);
  printf("  Switched function result: %d\n", LResult);
  
  LFloatResult := LFloatFunc(3.14, 2.86);
  printf("  Float function result: %.2f\n", LFloatResult);
  
  LProc("Hello from function pointer");
  
  LResult := LCompFunc(10, 20);
  printf("  Compare function result: %d\n", LResult);
  
  printf("Function type test completed\n");
end.