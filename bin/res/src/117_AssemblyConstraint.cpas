// 117_AssemblyConstraint.cpas
// BNF Rules: <assembly_constraint>, <output_operands>, <input_operands>, <clobbered_registers>
program AssemblyConstraintTest;

function printf(format: PChar, ...): Int32; cdecl; external "msvcrt.dll";

var
  LInput1: Int32;
  LInput2: Int32;
  LOutput1: Int32;
  LOutput2: Int32;

begin
  printf("Assembly constraint test:\n");
  
  LInput1 := 20;
  LInput2 := 15;
  
  // Assembly with output, input, and clobbered register constraints
  asm
    "movl %2, %%eax";
    "addl %3, %%eax";
    "movl %%eax, %0";
    "movl %2, %%ebx";
    "subl %3, %%ebx";
    "movl %%ebx, %1";
    : "=m" (LOutput1), "=m" (LOutput2)
    : "m" (LInput1), "m" (LInput2)
    : "eax", "ebx"
  end;
  
  printf("  Constrained operations:\n");
  printf("    %d + %d = %d (output1)\n", LInput1, LInput2, LOutput1);
  printf("    %d - %d = %d (output2)\n", LInput1, LInput2, LOutput2);
  
  // Different constraint types
  LInput1 := 8;
  asm
    "movl %1, %%eax";
    "shll $2, %%eax";
    "movl %%eax, %0";
    : "=r" (LOutput1)
    : "r" (LInput1)
    : "eax"
  end;
  
  printf("  Register constraint: %d << 2 = %d\n", LInput1, LOutput1);
  
  // Memory constraint
  LInput1 := 64;
  asm
    "movl %1, %%eax";
    "shrl $3, %%eax";
    "movl %%eax, %0";
    : "=m" (LOutput1)
    : "m" (LInput1)
    : "eax"
  end;
  
  printf("  Memory constraint: %d >> 3 = %d\n", LInput1, LOutput1);
  
  // Multiple clobbered registers
  LInput1 := 12;
  LInput2 := 5;
  asm
    "movl %2, %%eax";
    "movl %3, %%ebx";
    "imull %%ebx, %%eax";
    "movl %%eax, %%ecx";
    "addl $10, %%ecx";
    "movl %%ecx, %0";
    "subl $5, %%eax";
    "movl %%eax, %1";
    : "=m" (LOutput1), "=m" (LOutput2)
    : "m" (LInput1), "m" (LInput2)
    : "eax", "ebx", "ecx"
  end;
  
  printf("  Multiple registers:\n");
  printf("    (%d * %d) + 10 = %d\n", LInput1, LInput2, LOutput1);
  printf("    (%d * %d) - 5 = %d\n", LInput1, LInput2, LOutput2);
  
  printf("Assembly constraint test completed\n");
end.