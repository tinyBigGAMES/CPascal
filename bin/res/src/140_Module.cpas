// 140_Module.cpas
// BNF Rule: <module>
// CPascal string utilities module with realistic public/private mix
{$DEFINE STRINGUTILS_VERSION}
module StringUtils;

// Public constants - main interface
public const
  MAX_STRING_LENGTH = 4096;

// Private constants - implementation details
const
  INTERNAL_BUFFER_SIZE = 256;
  MIN_VALID_LENGTH = 1;

// PUBLIC INTERFACE - what other modules can import and use

public function StrLen(str: PChar): Int32;
var
  LCount: Int32;
begin
  LCount := 0;
  while str[LCount] <> #0 do
    Inc(LCount);
  result := LCount;
end;

public function StrCopy(dest, src: PChar): PChar;
var
  LIndex: Int32;
begin
  if not IsValidString(src) or not IsValidPointer(dest) then
  begin
    result := nil;
    exit;
  end;
  
  LIndex := 0;
  repeat
    dest[LIndex] := src[LIndex];
    Inc(LIndex);
  until src[LIndex - 1] = #0;
  result := dest;
end;

// PRIVATE IMPLEMENTATION - internal helpers, not exported

function IsValidPointer(ptr: PChar): Boolean;
begin
  result := ptr <> nil;
end;

function IsValidString(str: PChar): Boolean;
begin
  result := IsValidPointer(str) and (GetStringLength(str) >= MIN_VALID_LENGTH);
end;

function GetStringLength(str: PChar): Int32;
var
  LCount: Int32;
begin
  LCount := 0;
  if IsValidPointer(str) then
  begin
    while str[LCount] <> #0 do
      Inc(LCount);
  end;
  result := LCount;
end;

function CompareChars(c1, c2: Char): Int32;
begin
  if c1 < c2 then
    result := -1
  else if c1 > c2 then
    result := 1
  else
    result := 0;
end;

function GetInternalBufferSize(): Int32;
begin
  result := INTERNAL_BUFFER_SIZE;
end;

.
